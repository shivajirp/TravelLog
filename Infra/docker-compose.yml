services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # postgres_analytics:
  #   image: postgres:15
  #   container_name: postgres_analytics
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: travellog_analytics
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - pgdata_analytics:/var/lib/postgresql/data

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - travellog_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d travellog"]
      interval: 10s
      timeout: 5s
      retries: 5

  travellog:
    build:
      context: ../travellog-service
      dockerfile: Dockerfile
      target: prod
    env_file:
      - ../travellog-service/.env
    depends_on:
      redis:
          condition: service_started
      kafka:
          condition: service_started
      postgres:
          condition: service_healthy
    ports:
      - "4000:4000"
    
  # analytics:
  #   build:
  #     context: ../analytics-service
  #     dockerfile: Dockerfile
  #   container_name: analytics
  #   env_file:
  #     - ../analytics-service/.env
  #   depends_on:
  #     - postgres_analytics
  #     - kafka
  #   ports:
  #     - "5000:5000"

volumes:
  # pgdata_analytics:
  travellog_db_data: